stages:
  - test
  - deploy

before_script:
  # Install git.
  - apt-get update -qq && apt-get install -y git
  
  # Add the public General registry.
  - julia -e 'using Pkg; Pkg.Registry.add(RegistrySpec(url = "https://github.com/JuliaRegistries/General"))'


# Below is the template to run the tests in Julia
.test_template: &test_definition
  stage: test
  script:
    - echo "Run tests"
    - julia -e 'using Pkg; Pkg.Registry.status()'
    - julia --project=. -e 'using Pkg; Pkg.test(; coverage = true);
        Pkg.add("Coverage");
        Pkg.instantiate();
        using Coverage;
        let covered_lines = 0, total_lines = 0;
          for folder âˆˆ ["src", "ext"];
            processed = process_folder(folder);
            covered_lines_f, total_lines_f = get_summary(processed);
            covered_lines += covered_lines_f;
            total_lines += total_lines_f;
          end;
          percentage = covered_lines / total_lines * 100;
          return println("Code coverage $(percentage)%");
        end'
  coverage: '/Code coverage \d+\.\d+/'
  rules:
    - when: always


test:latest:
  image: julia:latest
  <<: *test_definition


# Test that the pages compile, without making it public. Only runs on merge requests.
test:pages:
  image: julia:latest
  stage: test
  script:
    - julia --project=docs -e 'import Pkg; Pkg.develop(;path="."); Pkg.instantiate()' # Initialize environment
    - julia --project=docs docs/make.jl # Build documentation
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

pages:
  stage: deploy
  image: julia:latest
  script:
    - julia --project=docs -e 'import Pkg; Pkg.develop(;path="."); Pkg.instantiate()' # Initialize environment
    - julia --project=docs docs/make.jl # Build documentation
    - mv docs/build public              # move to the directory picked up by Gitlab pages
  artifacts:
    paths:
      - public
